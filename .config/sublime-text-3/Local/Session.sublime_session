{
	"folder_history":
	[
		"/home/mmphego/mnt/cmc3/home/mmphego/learning_fast",
		"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/src",
		"/home/mmphego/mnt/cmc3/home/mmphego/src/katsdpingest",
		"/home/mmphego/mnt/cmc3/home/alec/katsdpingest",
		"/home/mmphego/exercism",
		"/home/mmphego/mnt/cmc3/srv/casperfpga",
		"/home/mmphego/mnt/cmc3/srv/corr2",
		"/home/mmphego/mnt/cmc3/usr/local/src/corr2",
		"/home/mmphego/mnt/cmc3/usr/local/src/corr2/scripts",
		"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests",
		"/home/mmphego/GitHub/OracleExecise",
		"/home/mmphego/mnt/cmc3/home/mmphego/src",
		"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Notes",
		"/home/mmphego/jenkins",
		"/home/mmphego",
		"/home/mmphego/GitHub/CBF-Tests-Automation",
		"/home/mmphego/mnt/cmc3/usr/local/src",
		"/home/mmphego/GitHub/programming-talks",
		"/home/mmphego/GitHub/mmphego.github.io/_site",
		"/home/mmphego/GitHub/axxess_scrapper",
		"/home/mmphego/GitHub",
		"/home/mmphego/mnt/dbelab04/home/mmphego/src/mkat_fpga_tests",
		"/home/mmphego/mnt/cmc3/usr/local/src/nosekatreport",
		"/home/mmphego/mnt/cmc1/home/avnuser/AVNTests",
		"/home/mmphego/mnt/cmc1/home/avnuser/AVN_Tests/mkat_fpga_tests",
		"/home/mmphego/GitHub/SublimeProj",
		"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress",
		"/home/mmphego/GitHub/mmphego.github.io",
		"/home/mmphego/GitHub/mmphego.github.io/img",
		"/home/mmphego/mnt/cmc3/home/mmphego/src/CBF-System-Dashboard",
		"/home/mmphego/mnt/dbelab06/srv/corr2",
		"/home/mmphego/mnt/cmc3/usr/local/src/casperfpga",
		"/home/mmphego/mnt/dbelab06/srv/casperfpga",
		"/home/mmphego/mnt/dbelab06/home/mmphego/src/mkat_fpga_tests",
		"/home/mmphego/mnt/pi/home",
		"/home/mmphego/mnt/cmc3/home/mmphego",
		"/home/mmphego/mnt/dbelab06/home/mmphego/src",
		"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/C.Programming",
		"/home/mmphego/Dropbox/Telkom",
		"/home/mmphego/Documents/Arduino/espurna",
		"/home/mmphego/mnt/dbelab06/home/mmphego/src/node-red-docker",
		"/home/mmphego/mnt/dbelab06/home/mmphego/src/CBF-System-Dashboard",
		"/home/mmphego/tmp/tweeterBot",
		"/home/mmphego/tmp/gitpages",
		"/home/mmphego/tmp/anuditverma.github.io",
		"/home/mmphego/tmp/mmphego.github.io",
		"/home/mmphego/tmp/hyd",
		"/home/mmphego/tmp/tweeterBot/TwitterFollowBot",
		"/home/mmphego/mnt/cmc3/home/mmphego/cbf_dash",
		"/home/mmphego/mnt/cmc2/home/mmphego/src/mkat_fpga_tests",
		"/home/mmphego/mnt/cmc2/home/mmphego/src",
		"/home/mmphego/mnt/dbelab06/srv/corr2/corr2",
		"/home/mmphego/mnt/dbelab06/etc/mkat_cbf_config",
		"/home/mmphego/mnt/cmc2/srv/corr2",
		"/home/mmphego/mnt/cmc2/home/mmphego/src/mkat_fpga_tests/scripts",
		"/home/mmphego/mnt/cmc2/srv/katcp-python",
		"/home/mmphego/mnt/cmc2/srv/casperfpga",
		"/home/mmphego/mnt/dbelab04/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests",
		"/home/mmphego/mnt/dbelab04/home/mmphego/mkat_fpga_tests/mkat_fpga_tests",
		"/home/mmphego/mnt/dbelab04/usr/local/src/nosekatreport",
		"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/C.Programming/Snippets/Sampled_Values_example",
		"/home/mmphego/mnt/cmc3/usr/local/src/corr2/src",
		"/home/mmphego/mnt/cmc2/srv/casperfpga/src",
		"/home/mmphego/mnt/dbelab04/usr/local/src/corr2",
		"/home/mmphego/Work/espurna/code",
		"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/C.Programming/Snippets",
		"/home/mmphego/mnt/pi/home/pi/AlexaPI",
		"/home/mmphego/mnt/pi/home/pi/AmazonAWS/Homely",
		"/home/mmphego/aws/alexa-smarthome/sample_lambda/python",
		"/home/mmphego/mnt/pi/home/pi/AmazonAWS",
		"/home/mmphego/aws/DSTV-aws-iot-alexa-voice",
		"/home/mmphego/aws/intel-edison-aws-iot-alexa-voice",
		"/home/mmphego/aws/alexa_home_control",
		"/home/mmphego/Dropbox/MTech Stuff(Deprecated)/HomeAutoPi/Homely/1. Raspberry Pi/1. AlexaPi/IOT-Pi3-Alexa-Automation",
		"/home/mmphego/tmp",
		"/home/mmphego/mnt/dbelab04/usr/local/src/corr2/scripts",
		"/home/mmphego/mnt/dbelab04/home/mmphego/mkat_fpga_tests",
		"/home/mmphego/mnt/cmc3/usr/local",
		"/home/mmphego/mnt/dbelab04/home/mmphego",
		"/home/mmphego/Work/sanketplus.github.io",
		"/home/mmphego/mnt/dbelab04/home/mmphego/src",
		"/home/mmphego/Work/DSTV_A6_ESP8266_Remote",
		"/home/mmphego/Dropbox/Dropbox/mmphego.github.io",
		"/home/mmphego/mnt/dbelab04/usr/local/src",
		"/home/mmphego/Work/espurna",
		"/home/mmphego/Arduino/libraries",
		"/home/mmphego/mnt/dbelab04/usr/local/src/CBF-System-Dashboard",
		"/home/mmphego/mnt/dbelab04/home/mmphego/temp/CBF-System-Dashboard",
		"/home/mmphego/mnt/dbelab04/home/mmphego/CBF-System-Dashboard",
		"/home/mmphego/mnt/dbelab04/usr/local/src/CBF-Tests-Automation",
		"/home/mmphego/mnt/dbelab04/home/mmphego/Docker-nodered",
		"/home/mmphego/mnt/dbelab04/usr/local/src/cbf-jenkins-docker",
		"/home/mmphego/mnt/pi/home/pi",
		"/home/mmphego/mnt/dbelab04/usr/local/src/casperfpga",
		"/home/mmphego/mnt/dbelab04/usr/local/src/katcp-python",
		"/home/mmphego/Dropbox/Dropbox/MTech Stuff/HomeAutoPi/1. Raspberry Pi/3. Telegram/TelegramBot",
		"/home/mmphego/mnt/pi/home/pi/AlexaPi",
		"/home/mmphego/BackupHDD/DISTROS/osmc/PyWhatsapp",
		"/home/mmphego/RaspberryPiProjects/pywakeonlan/wakeonlan",
		"/home/mmphego/mnt/dbelab04"
	],
	"last_version": 3176,
	"last_window_id": 169,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 0.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"time",
						"timedebug"
					],
					[
						"log",
						"logLevel"
					],
					[
						"LO",
						"LoggingClass"
					],
					[
						"Stre",
						"StreamHandler\tclass"
					],
					[
						"Lo",
						"LoggingClass"
					],
					[
						"std",
						"stderr\tinstance"
					],
					[
						"hand",
						"handlers\tstatement"
					],
					[
						"_dump_",
						"_dump_timestamp_readable"
					],
					[
						"_co",
						"_config_info"
					],
					[
						"dict",
						"dictsMerger\tfunction"
					],
					[
						"_lo",
						"_logLevel"
					],
					[
						"logg",
						"logger"
					],
					[
						"IP",
						"IPython"
					],
					[
						"cret",
						"create"
					],
					[
						"corr",
						"correlator"
					],
					[
						"mer",
						"merge_dicts"
					],
					[
						"sensor",
						"sensors_info"
					],
					[
						"_dum",
						"_dump_timestamp_readable"
					],
					[
						"cle",
						"clearall"
					],
					[
						"logi",
						"logging"
					],
					[
						"set",
						"setLevel\tfunction"
					],
					[
						"s",
						"stop"
					],
					[
						"r",
						"RUN"
					],
					[
						"WORK",
						"WORKDIR\t(Dockerfile)"
					],
					[
						"mk",
						"mkat_fpga_tests\t(test_cbf.py)"
					],
					[
						"mkat",
						"mkat_fpga_tests"
					],
					[
						"bit",
						"bitstream\t(test_cbf.py)"
					],
					[
						"file",
						"filename\t(test_cbf.py)"
					],
					[
						"get_s",
						"get_system_information\t(test_cbf.py)"
					],
					[
						"logs",
						"logs_sensors"
					],
					[
						"tear",
						"teardown_package"
					],
					[
						"ac",
						"activeCount\tstatement"
					],
					[
						"Array",
						"Array-List"
					],
					[
						"_kat",
						"_katcp_rct_sensor"
					],
					[
						"reosue",
						"resource_client"
					],
					[
						"exc_",
						"exc_info=True\t(sensor_poll.py)"
					],
					[
						"ger",
						"get_sensors"
					],
					[
						"Ke",
						"KeyboardInterrupt\tclass"
					],
					[
						"repl",
						"reply.reply_ok"
					],
					[
						"info",
						"informs"
					],
					[
						"katc",
						"katcp_rct_sensor"
					],
					[
						"Sens",
						"SensorPoll"
					],
					[
						"sen",
						"sensor_poll\t(sensor_poll.py)"
					],
					[
						"Not",
						"NotImplementedError\tclass"
					],
					[
						"katcp_cli",
						"katcp_client_port"
					],
					[
						"NotI",
						"NotImplementedError\tclass"
					],
					[
						"arra",
						"array_name"
					],
					[
						"if",
						"ifmain\tif __name__ == '__main__'"
					],
					[
						"exc",
						"exc_info=True"
					],
					[
						"sec",
						"sec_sensors_katcp_con"
					],
					[
						"e",
						"except"
					],
					[
						"new_",
						"new_mapping"
					],
					[
						"colle",
						"collections"
					],
					[
						"order",
						"ordered_sensor_dict"
					],
					[
						"prim",
						"primary_client"
					],
					[
						"fom",
						"format"
					],
					[
						"json",
						"json_dumps"
					],
					[
						"js",
						"json_dumps\t(sensor_poll.py)"
					],
					[
						"cbf",
						"cbf_sensors_dash.py"
					],
					[
						"bh",
						"bhost_fpga"
					],
					[
						"fp",
						"fhost_fpga\tmodule"
					],
					[
						"Run",
						"RuntimeError"
					],
					[
						"thre",
						"threaded_fpga_operation"
					],
					[
						"auto",
						"automagically"
					],
					[
						"start",
						"startall"
					],
					[
						"sona",
						"sonarstart"
					],
					[
						"port",
						"portainerstart"
					],
					[
						"poe",
						"portainerstop"
					],
					[
						"por",
						"portainer"
					],
					[
						"soan",
						"sonar"
					],
					[
						"act",
						"active_frames"
					],
					[
						"quit",
						"quit_event"
					],
					[
						"real",
						"realimag"
					],
					[
						"basel",
						"baseline_correlation_products_n_chans"
					],
					[
						"baseli",
						"baselines"
					],
					[
						"baselie",
						"baseline_correlation_products_n_bls"
					],
					[
						"baseline",
						"baseline_correlation_products_n_bls"
					],
					[
						"n",
						"n_accs"
					],
					[
						"baseloi",
						"baseline_correlation_products_n_bls"
					],
					[
						"chan",
						"channels"
					],
					[
						"get_",
						"get_plot_data"
					],
					[
						"baseline_c",
						"baseline_correlation_products_n_chans"
					],
					[
						"base",
						"baselines"
					],
					[
						"le",
						"legend"
					],
					[
						"get",
						"getattr"
					],
					[
						"n-",
						"n-xengs"
					],
					[
						"qui",
						"quit_event"
					],
					[
						"f",
						"figure"
					],
					[
						"inf",
						"info"
					],
					[
						"de",
						"debug"
					],
					[
						"star",
						"startswith"
					],
					[
						"Ru",
						"RuntimeError"
					],
					[
						"Ex",
						"Exception\t(utils.py)"
					],
					[
						"conf",
						"config_info\tstatement"
					],
					[
						"config",
						"config_info"
					],
					[
						"feng",
						"fengine_conf"
					],
					[
						"outp",
						"output_products"
					],
					[
						"des",
						"destination"
					],
					[
						"Dict",
						"DictObject"
					],
					[
						"cong",
						"config_info"
					],
					[
						"con",
						"config_info"
					],
					[
						"n_c",
						"n_chans\tstatement"
					],
					[
						"Ska",
						"SkarabTransport"
					],
					[
						"trans",
						"transport\t(transport_tapcp.py)"
					],
					[
						"clas",
						"classmethod\tclass"
					],
					[
						"stop",
						"stop_substream\tstatement"
					],
					[
						"end",
						"end_ip"
					],
					[
						"has",
						"hasattr"
					],
					[
						"Asse",
						"AssertionError"
					],
					[
						"serve",
						"servlet_ip"
					],
					[
						"serv",
						"servlet_ip"
					],
					[
						"ser",
						"servlet_port"
					],
					[
						"se",
						"sensors"
					],
					[
						"confi",
						"config_info"
					],
					[
						"Ba",
						"BASELINES"
					],
					[
						"h5",
						"h5_file"
					],
					[
						"output",
						"output_products"
					],
					[
						"xeng",
						"xengine_conf"
					],
					[
						"xe",
						"xengine_conf"
					],
					[
						"fen",
						"fengine_conf"
					],
					[
						"fe",
						"fengine_conf"
					],
					[
						"stat",
						"staticmethod\tclass"
					],
					[
						"Thre",
						"Thread"
					],
					[
						"di",
						"div\tTag"
					],
					[
						"local",
						"local_threadpool"
					],
					[
						"NUM_",
						"NUM_XENG"
					],
					[
						"heap",
						"heap_data"
					],
					[
						"n_chan",
						"n_chans_per_substream"
					]
				]
			},
			"build_system_choices":
			[
				[
					[
						[
							"Packages/C++/C++ Single File.sublime-build",
							""
						],
						[
							"Packages/C++/C++ Single File.sublime-build",
							"Run"
						]
					],
					[
						"Packages/C++/C++ Single File.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Makefile/Make.sublime-build",
							""
						],
						[
							"Packages/Makefile/Make.sublime-build",
							"Clean"
						],
						[
							"Packages/Python/Python.sublime-build",
							""
						],
						[
							"Packages/Python/Python.sublime-build",
							"Syntax Check"
						],
						[
							"Packages/User/C++.sublime-build",
							""
						],
						[
							"Packages/User/C++.sublime-build",
							"Run"
						]
					],
					[
						"Packages/Python/Python.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Python/Python.sublime-build",
							""
						],
						[
							"Packages/Python/Python.sublime-build",
							"Syntax Check"
						]
					],
					[
						"Packages/Python/Python.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Python/Python.sublime-build",
							""
						],
						[
							"Packages/Python/Python.sublime-build",
							"Syntax Check"
						],
						[
							"Packages/User/C++.sublime-build",
							""
						],
						[
							"Packages/User/C++.sublime-build",
							"Run"
						]
					],
					[
						"Packages/Python/Python.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/User/C++.sublime-build",
							""
						],
						[
							"Packages/User/C++.sublime-build",
							"Run"
						]
					],
					[
						"Packages/User/C++.sublime-build",
						"Run"
					]
				]
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 392.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"Package Control: ",
						"Package Control: Install Package"
					],
					[
						"Package Control: ins",
						"Package Control: Install Package"
					],
					[
						"in",
						"Package Control: Install Package"
					],
					[
						"pac",
						"Package Control: Install Package"
					],
					[
						"outli",
						"Browse Mode: Outline (Left)"
					],
					[
						"instal",
						"Package Control: Install Package"
					],
					[
						"Snippet: ",
						"Snippet: #include <…>"
					],
					[
						"insta",
						"Package Control: Install Package"
					],
					[
						"Snippet: int",
						"Snippet: printf …"
					],
					[
						"install",
						"Package Control: Install Package"
					],
					[
						"Package Control: install",
						"Package Control: Install Package"
					],
					[
						"ins",
						"Package Control: Install Package"
					],
					[
						"menu",
						"View: Toggle Menu"
					],
					[
						"Snippet: ip",
						"Snippet: ipython"
					],
					[
						"Snippet:",
						"Snippet: __magic__"
					],
					[
						"parkage",
						"Package Control: Install Package"
					],
					[
						"python",
						"Set Syntax: Python"
					]
				],
				"width": 551.0
			},
			"console":
			{
				"height": 502.0,
				"history":
				[
					"exit",
					"ls"
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/mmphego/mnt/cmc3/srv/casperfpga/build/lib.linux-x86_64-2.7/casperfpga/casperfpga.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/__init__.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/aqf_utils.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/test_cbf.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/fxcorrelator_fengops.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/fxcorrelator.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/utils.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/build/lib.linux-x86_64-2.7/corr2/instrument.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/beam.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/fhost_fpga.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/fxcorrelator_bengops.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/xhost_fpga.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/sensors.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/fxcorrelator_xengops.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/fxcorrelator_filterops.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/filthost_fpga.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/corr2/corr2LogHandlers.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/bhost_fpga.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/data_stream.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/build/lib.linux-x86_64-2.7/corr2/dsimhost_fpga.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/host_fpga.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/build/lib.linux-x86_64-2.7/corr2/fxcorrelator.py",
				"/home/mmphego/mnt/cmc3/srv/casperfpga/src/transport_skarab.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/.venv/lib/python2.7/site-packages/casperfpga/transport_skarab.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/.venv/lib/python2.7/site-packages/corr2/fxcorrelator.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/build/lib.linux-x86_64-2.7/corr2/fhost_fpga.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/.venv/lib/python2.7/site-packages/corr2/host_fpga.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/.venv/lib/python2.7/site-packages/corr2/fhost_fpga.py",
				"/home/mmphego/GitHub/My-Dockerfiles/fast.ai/Dockerfile",
				"/home/mmphego/GitHub/corr2/corr2/fxcorrelator.py",
				"/home/mmphego/GitHub/corr2/src/corr2LogHandlers.py",
				"/home/mmphego/GitHub/corr2/src/fxcorrelator.py",
				"/home/mmphego/GitHub/corr2/corr2/instrument.py",
				"/home/mmphego/GitHub/new_DSTV_A6_esp8266_IRRemote/.piolibdeps/ArduinoJson/third-party/catch/catch.hpp",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/Corr_RX.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/scripts/corr2_rx.py",
				"/home/mmphego/GitHub/corr2/src/host_fpga.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts/delays_debugging.sh",
				"/home/mmphego/GitHub/My-Dockerfiles/fast.ai/Makefile",
				"/home/mmphego/GitHub/mmphego.github.io/_posts/2018-11-05-My-docker-container-has-no-internet.md",
				"/home/mmphego/GitHub/My-Dockerfiles/fast.ai/README.md",
				"/home/mmphego/GitHub/learning_fastai/Dockerfile",
				"/home/mmphego/mnt/cmc3/home/mmphego/learning_fast/Dockerfile",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/.coverage",
				"/home/mmphego/mnt/cmc3/srv/casperfpga/casperfpga/utils.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/dsimhost_fpga.py",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/src/sensor_poll.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/run_cbf_tests.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts/setup_virtualenv.sh",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts/pre_setup.sh",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/src/poll.py",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/Dockerfile",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/DockerfileSensorPoll",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/src/cbf_sensors_dash.py",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/Makefile",
				"/home/mmphego/mnt/cmc3/home/mmphego/temp/index.html",
				"/home/mmphego/mnt/cmc3/home/mmphego/temp/test.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/temp/flask.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts/Jenkins_Scripts/rx_test_4.sh",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/config/test_conf_site.ini",
				"/home/mmphego/.config/sublime-text-3/Packages/User/highlight_duplicates.sublime-settings",
				"/home/mmphego/GitHub/mmphego.github.io/_posts/2018-09-25-Automated-Qualification-Testing-for-the-64-Antennas-MeerKAT-Correlator-Beamformer.md",
				"/home/mmphego/Dropbox/MEng_Stuff/CPUT Logistics/ITS CPUT Logins",
				"/home/mmphego/Dropbox/BTech Project/Proposal and Reports 2015/Final Report/test.tex",
				"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Notes/Section B/Literature-Review.md",
				"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Proposal_Latex/misc/abbreviations.tex",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/README.md",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-Tests-Automation/Makefile",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/json_dumps/sensor_values.json",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/src/pip-requirements.txt",
				"/home/mmphego/mnt/cmc3/srv/corr2/scripts/corr2_sensor_servlet.py",
				"/home/mmphego/GitHub/mmphego.github.io/_posts/2018-10-23-How-I-configured-JenkinsCI-server-in-a-Docker-container-2.md",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-Tests-Automation/readme.md",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-Tests-Automation/Dockerfile",
				"/home/mmphego/GitHub/mmphego.github.io/_posts/2018-08-28-How-I-configured-JenkinsCI-server-in-a-Docker-container-2.md",
				"/home/mmphego/GitHub/mmphego.github.io/_posts/2018-08-20-How-I-configured-JenkinsCI-server-in-a-Docker-container.md",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/Jenkinsfile",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-Tests-Automation/fabfile.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/corr2LogHandlers.py",
				"/tmp/mozilla_mmphego0/code.py",
				"/home/mmphego/mnt/cmc3/usr/local/src/git-hooks/hooks/pre-commit",
				"/home/mmphego/mnt/cmc3/usr/local/src/nosekatreport/nosekatreport/decorators.py",
				"/home/mmphego/GitHub/mmphego.github.io/_posts/2018-10-22-Better-Git-Commit-Messages-using-Templates.md",
				"/tmp/mozilla_mmphego0/dbelab06ProfilerResultsSortedByNoCalls.txt",
				"/home/mmphego/mnt/cmc3/usr/local/src/git-hooks/templates/README.md",
				"/home/mmphego/.cache/.fr-R9JoZp/WhatsApp Chat with Mpho.txt",
				"/home/mmphego/mnt/cmc3/usr/local/src/git-hooks/README.md",
				"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Tests/example.bib",
				"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Tests/main.tex",
				"/home/mmphego/.cache/.fr-vRhRD6/main.tex",
				"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Tests/Appendices/AppendixA.tex",
				"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Tests/Appendices/AppendixTemplate.tex",
				"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Tests/main.aux",
				"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Tests/MastersThesis.cls",
				"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Tests/MastersDoctoralThesis.cls",
				"/home/mmphego/Dropbox/MEng_Stuff/Tests/Chapters/ChapterTemplate.tex",
				"/home/mmphego/Dropbox/MEng_Stuff/Tests/Chapters/.Chapter1.tex.swp",
				"/home/mmphego/Dropbox/MEng_Stuff/Tests/Chapters/Chapter1.tex",
				"/home/mmphego/.cache/.fr-nEtW8x/LibreOffice_6.1.2.1_Linux_x86-64_deb/readmes/README_en-US",
				"/home/mmphego/mnt/cmc3/srv/corr2/scripts/test.txt",
				"/home/mmphego/mnt/cmc3/srv/corr2/debug/vaccbug/inspect_rx_packets.py",
				"/home/mmphego/.cache/.fr-WV1LlY/python-data-science/03-matplotlib/02-matplotlib-subplots.ipynb",
				"/home/mmphego/mnt/cmc3/srv/corr2/build/scripts-2.7/corr2_rx.py",
				"/home/mmphego/mnt/cmc3/home/alec/katsdpingest/katsdpingest/receiver.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/scripts/corr2_dsim_control.py",
				"/home/mmphego/mnt/cmc3/srv/casperfpga/src/casperfpga.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/corr2/host_fpga.py",
				"/home/mmphego/mnt/cmc3/srv/casperfpga/src/transport_tapcp.py",
				"/tmp/mozilla_mmphego0/errorband_lineplots.py",
				"/home/mmphego/GitHub/mmphego.github.io/must-watch-talks.md",
				"/home/mmphego/GitHub/linkedin/http_api.py",
				"/home/mmphego/GitHub/linkedin/.env",
				"/home/mmphego/mnt/cmc3/home/alec/katsdpingest/spead2/examples/test_recv.py",
				"/home/mmphego/Python/python-data-science/Makefile",
				"/home/mmphego/GitHub/linkedin/linkedin.py",
				"/home/mmphego/Python/python-data-science/README.md",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts/spead2_rx_debug.py",
				"/home/mmphego/GitHub/mmphego.github.io/resume.html",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/Makefile",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts/Jenkins_Scripts/init_instrument_3.sh",
				"/home/mmphego/GitHub/mmphego.github.io/_data/resume.yml",
				"/home/mmphego/GitHub/mmphego.github.io/mentions.md",
				"/home/mmphego/GitHub/mmphego.github.io/assets/devopsdays.jpeg",
				"/home/mmphego/.cache/.fr-rqHVKv/netl1c63x64.inf",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts/Jenkins_Scripts/check_dep_2.sh",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts/Jenkins_Scripts/install_dep_1.sh",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/setup.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts/Jenkins_Scripts/run_test_5.sh"
			],
			"find":
			{
				"height": 29.0
			},
			"find_in_files":
			{
				"height": 352.0,
				"where_history":
				[
					"/home/mmphego/mnt/cmc3/srv/casperfpga",
					"/home/mmphego/mnt/cmc3/srv/corr2/src",
					"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/src",
					"/home/mmphego/GitHub/mmphego.github.io",
					"/home/mmphego/mnt/cmc3/srv/corr2",
					"/home/mmphego/mnt/cmc3/srv/casperfpga/src",
					"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests",
					"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests",
					"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests",
					"/home/mmphego/mnt/cmc3/srv/casperfpga",
					"/home/mmphego/mnt/cmc3/srv/corr2/src",
					"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests",
					"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts",
					"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests",
					"/home/mmphego/mnt/cmc3/usr/local/src/CBF-Tests-Automation",
					"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Notes/Summarised.Papers",
					"/home/mmphego/mnt/cmc3/usr/local/src/CBF-Tests-Automation",
					"/home/mmphego/mnt/cmc1/home/avnuser/AVNTests/AVNTests/avn_tests",
					"/home/mmphego/mnt/cmc1/home/avnuser/AVNTests/AVNTests",
					"/home/mmphego/mnt/cmc3/usr/local/src/katcp-python",
					"/home/mmphego/mnt/cmc3/usr/local/src/corr2",
					"/home/mmphego/mnt/cmc3/usr/local/src/corr2/src"
				]
			},
			"find_state":
			{
				"case_sensitive": true,
				"find_history":
				[
					"self._frames",
					"_read_stream",
					"get_delay_bounds",
					"DTIME",
					"pdebug",
					"corr_config",
					"raise",
					"CorrReceiver",
					"print ",
					"LoggingClass",
					"handler",
					"self",
					"corr_instance",
					"self",
					"DictObject",
					"evaluate_corr",
					"#!/",
					"test_heading",
					"logging.ERROR",
					"ERROR",
					"logging.ERROR",
					"ERROR",
					"logging.ERROR",
					"IPyt",
					"FEngineOperations",
					"LOGGER",
					"IPython",
					"self.init",
					"initialise",
					"FEngineOperations",
					"configure",
					"logging.INFO",
					"log_level=INFO",
					"INFO",
					"getLogger",
					"logLevel",
					"INFO",
					"FpgaHost",
					"IPy",
					"FpgaHost",
					"SkarabTransport",
					"__init__",
					"SkarabTransport",
					"IPyth",
					"getLogger",
					"INFO",
					"getLogger",
					"INFO",
					"_create_hosts",
					"INFO",
					"info",
					"INFO",
					"\\\n",
					"IPy",
					"print",
					"_test_delay_tracking",
					"get_sensors",
					"sync_time",
					"get_sensors",
					"scale_factor_timestamp",
					"scale_f",
					"process_xeng_data",
					"logger",
					"Logger",
					"LOGGER",
					"self.logger",
					"logger",
					"Logger",
					"LOGGER",
					"_spead_stream",
					"corr2_rx",
					"corr2",
					"%i",
					"FATAL",
					"jenkins",
					"_delays_setup",
					"_test_report_config",
					"fft_shift = 511",
					"gain = \"113+0j\"",
					"awgn_scale = 0.0645",
					"cw_scale",
					"self.get_clean_dump()",
					"self.get_clean_dump",
					"get_clean_dump",
					"print (time.",
					"\n        ",
					"\n    ",
					"Cleanup",
					"cleanup",
					"hostname_mapping",
					"merged_sensors_dict",
					"get_sensor_values",
					"Sensor",
					"sensor",
					"cleanup",
					"self.cleanup",
					"self.cleanu",
					"LoggingClass",
					"get_inputlabel",
					"sensor_request",
					"sensor-value",
					"conte",
					"context",
					"add_cleanup",
					"atexit.register",
					"self._errmsg",
					"),",
					"logger",
					"katcp_rct_sensor",
					"raise",
					"display_page",
					".endswith(\"4k\")",
					"test_chan =",
					"test_chan=",
					"1500",
					"        with RunTestWithTimeout(\n",
					"\n            ",
					"with RunTestWithTimeout(\n",
					"with RunTestWithTimeout(",
					"CorrRx",
					"')\n",
					"join",
					"atexit.register(",
					"atexit",
					"atexit.register",
					"start",
					"_timeout",
					"=_timeout"
				],
				"highlight": false,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					"heading",
					"_logLevel",
					"self.receiver.get_clean_dump()",
					"     ",
					"SensorPoll",
					"channels",
					"network",
					"Warning -m pip",
					"$(command -v  python) -W ignore::Warning pip",
					"Section-A",
					"-",
					"avn_tests"
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": false
			},
			"incremental_find":
			{
				"height": 29.0
			},
			"input":
			{
				"height": 123.0
			},
			"menu_visible": true,
			"output.1484047395.6373365":
			{
				"height": 38.0
			},
			"output.build|/home/mmphego/Apts/arduino-1.6.12/test|1500630185.3137703":
			{
				"height": 118.0
			},
			"output.build|/home/mmphego/Apts/arduino-1.6.12/test|1500630228.8832595":
			{
				"height": 118.0
			},
			"output.clangautocomplete":
			{
				"height": 171.0
			},
			"output.exec":
			{
				"height": 37.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"output.mdpopups":
			{
				"height": 0.0
			},
			"output.unsaved_changes":
			{
				"height": 132.0
			},
			"output.upload|/home/mmphego/Arduino/hcsr04|1488449906.015194":
			{
				"height": 94.0
			},
			"output.upload|/home/mmphego/OneDrive/Documents/Proposal 2016/HomeAutoPi/MQTT Pub/mqtt_esp8266_nodemcuV2|1484047356.5805616":
			{
				"height": 178.0
			},
			"pinned_build_system": "",
			"replace":
			{
				"height": 54.0
			},
			"save_all_on_build": false,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"test",
						"mkat_fpga_tests/test_cbf.py"
					],
					[
						"repor",
						"report_generator/report.py"
					],
					[
						"943",
						"CBF_tests_reports/bc8n856M32k-20170911-14h22/html/_static/jquery-3.1.0.js"
					],
					[
						"baseline",
						"mkat_fpga_tests/ipython_notebooks/experimental/baseline_product_test.ipynb"
					],
					[
						"",
						"PFB_ch_test.py~"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 500.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 380.0
			},
			"select_symbol":
			{
				"height": 392.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 1308.0
			},
			"show_minimap": false,
			"show_open_files": true,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 240.0,
			"status_bar_visible": true,
			"template_settings":
			{
				"max_columns": 2
			}
		},
		"new_window_width": 0.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"Aq",
						"Aqfs"
					],
					[
						"exc",
						"exc_info=True"
					],
					[
						"exc_info",
						"exc_info=True"
					],
					[
						"ERR",
						"Error\tfunction"
					],
					[
						"Loggin",
						"LoggingClass"
					],
					[
						"Lo",
						"LoggingClass\t(__init__.py)"
					],
					[
						"Log",
						"LogMixin"
					],
					[
						"LO",
						"LOGGING_LEVEL"
					],
					[
						"logging",
						"LOGGING_LEVEL\tstatement"
					],
					[
						"D",
						"DEBUG"
					],
					[
						"DE",
						"DEBUG\tstatement"
					],
					[
						"logg",
						"logging"
					],
					[
						"Loggi",
						"LoggingClass"
					],
					[
						"Logg",
						"LoggingClass"
					],
					[
						"log",
						"log_level\tstatement"
					],
					[
						"time",
						"timedebug"
					],
					[
						"Stre",
						"StreamHandler\tclass"
					],
					[
						"std",
						"stderr\tinstance"
					],
					[
						"hand",
						"handlers\tstatement"
					],
					[
						"_dump_",
						"_dump_timestamp_readable"
					],
					[
						"_co",
						"_config_info"
					],
					[
						"dict",
						"dictsMerger\tfunction"
					],
					[
						"_lo",
						"_logLevel"
					],
					[
						"IP",
						"IPython"
					],
					[
						"cret",
						"create"
					],
					[
						"corr",
						"correlator"
					],
					[
						"mer",
						"merge_dicts"
					],
					[
						"sensor",
						"sensors_info"
					],
					[
						"_dum",
						"_dump_timestamp_readable"
					],
					[
						"cle",
						"clearall"
					],
					[
						"logi",
						"logging"
					],
					[
						"set",
						"setLevel\tfunction"
					],
					[
						"s",
						"stop"
					],
					[
						"r",
						"RUN"
					],
					[
						"WORK",
						"WORKDIR\t(Dockerfile)"
					],
					[
						"mk",
						"mkat_fpga_tests\t(test_cbf.py)"
					],
					[
						"mkat",
						"mkat_fpga_tests"
					],
					[
						"bit",
						"bitstream\t(test_cbf.py)"
					],
					[
						"file",
						"filename\t(test_cbf.py)"
					],
					[
						"get_s",
						"get_system_information\t(test_cbf.py)"
					],
					[
						"logs",
						"logs_sensors"
					],
					[
						"tear",
						"teardown_package"
					],
					[
						"ac",
						"activeCount\tstatement"
					],
					[
						"Array",
						"Array-List"
					],
					[
						"_kat",
						"_katcp_rct_sensor"
					],
					[
						"reosue",
						"resource_client"
					],
					[
						"exc_",
						"exc_info=True\t(sensor_poll.py)"
					],
					[
						"ger",
						"get_sensors"
					],
					[
						"Ke",
						"KeyboardInterrupt\tclass"
					],
					[
						"repl",
						"reply.reply_ok"
					],
					[
						"info",
						"informs"
					],
					[
						"katc",
						"katcp_rct_sensor"
					],
					[
						"Sens",
						"SensorPoll"
					],
					[
						"sen",
						"sensor_poll\t(sensor_poll.py)"
					],
					[
						"Not",
						"NotImplementedError\tclass"
					],
					[
						"katcp_cli",
						"katcp_client_port"
					],
					[
						"NotI",
						"NotImplementedError\tclass"
					],
					[
						"arra",
						"array_name"
					],
					[
						"if",
						"ifmain\tif __name__ == '__main__'"
					],
					[
						"sec",
						"sec_sensors_katcp_con"
					],
					[
						"e",
						"except"
					],
					[
						"new_",
						"new_mapping"
					],
					[
						"colle",
						"collections"
					],
					[
						"order",
						"ordered_sensor_dict"
					],
					[
						"prim",
						"primary_client"
					],
					[
						"fom",
						"format"
					],
					[
						"json",
						"json_dumps"
					],
					[
						"js",
						"json_dumps\t(sensor_poll.py)"
					],
					[
						"cbf",
						"cbf_sensors_dash.py"
					],
					[
						"bh",
						"bhost_fpga"
					],
					[
						"fp",
						"fhost_fpga\tmodule"
					],
					[
						"Run",
						"RuntimeError"
					],
					[
						"thre",
						"threaded_fpga_operation"
					],
					[
						"auto",
						"automagically"
					],
					[
						"start",
						"startall"
					],
					[
						"sona",
						"sonarstart"
					],
					[
						"port",
						"portainerstart"
					],
					[
						"poe",
						"portainerstop"
					],
					[
						"por",
						"portainer"
					],
					[
						"soan",
						"sonar"
					],
					[
						"act",
						"active_frames"
					],
					[
						"quit",
						"quit_event"
					],
					[
						"real",
						"realimag"
					],
					[
						"basel",
						"baseline_correlation_products_n_chans"
					],
					[
						"baseli",
						"baselines"
					],
					[
						"baselie",
						"baseline_correlation_products_n_bls"
					],
					[
						"baseline",
						"baseline_correlation_products_n_bls"
					],
					[
						"n",
						"n_accs"
					],
					[
						"baseloi",
						"baseline_correlation_products_n_bls"
					],
					[
						"chan",
						"channels"
					],
					[
						"get_",
						"get_plot_data"
					],
					[
						"baseline_c",
						"baseline_correlation_products_n_chans"
					],
					[
						"base",
						"baselines"
					],
					[
						"le",
						"legend"
					],
					[
						"get",
						"getattr"
					],
					[
						"n-",
						"n-xengs"
					],
					[
						"qui",
						"quit_event"
					],
					[
						"f",
						"figure"
					],
					[
						"inf",
						"info"
					],
					[
						"de",
						"debug"
					],
					[
						"star",
						"startswith"
					],
					[
						"Ru",
						"RuntimeError"
					],
					[
						"Ex",
						"Exception\t(utils.py)"
					],
					[
						"conf",
						"config_info\tstatement"
					],
					[
						"config",
						"config_info"
					],
					[
						"feng",
						"fengine_conf"
					],
					[
						"outp",
						"output_products"
					],
					[
						"des",
						"destination"
					],
					[
						"Dict",
						"DictObject"
					],
					[
						"cong",
						"config_info"
					],
					[
						"con",
						"config_info"
					],
					[
						"n_c",
						"n_chans\tstatement"
					],
					[
						"Ska",
						"SkarabTransport"
					],
					[
						"trans",
						"transport\t(transport_tapcp.py)"
					],
					[
						"clas",
						"classmethod\tclass"
					],
					[
						"stop",
						"stop_substream\tstatement"
					],
					[
						"end",
						"end_ip"
					],
					[
						"has",
						"hasattr"
					],
					[
						"Asse",
						"AssertionError"
					],
					[
						"serve",
						"servlet_ip"
					],
					[
						"serv",
						"servlet_ip"
					],
					[
						"ser",
						"servlet_port"
					],
					[
						"se",
						"sensors"
					],
					[
						"confi",
						"config_info"
					],
					[
						"Ba",
						"BASELINES"
					],
					[
						"h5",
						"h5_file"
					],
					[
						"output",
						"output_products"
					],
					[
						"xeng",
						"xengine_conf"
					]
				]
			},
			"buffers":
			[
				{
					"file": "mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/__init__.py",
					"settings":
					{
						"buffer_size": 33557,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"file": "mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/test_cbf.py",
					"settings":
					{
						"buffer_size": 403055,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				},
				{
					"contents": "Searching 1 file for \"except E\" (case sensitive)\n\n/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/test_cbf.py:\n   94              self.katcp_req_sensors = self.corr_fix.katcp_rct_sensor.req\n   95              self.Note(\"Connecting to katcp client on %s\" % self.corr_fix.katcp_client)\n   96:         except Exception:\n   97              self.Error(\"Failed to read test config file.\", exc_info=True)\n   98          try:\n   ..\n  100              errmsg = \"Failed to instantiate the dsim, investigate\"\n  101              assert isinstance(self.dhost, corr2.dsimhost_fpga.FpgaDsimHost), errmsg\n  102:         except Exception:\n  103              self.logger.exception(errmsg)\n  104          else:\n  ...\n  134                      self.logger.info(\"Digitiser sync epoch set successfully\")\n  135                      set_dsim_epoch = self._dsim_set = True\n  136:                 except Exception:\n  137                      self.Error(errmsg, exc_info=True)\n  138  \n  ...\n  164                  \"Currently running instrument %s-%s as per /etc/corr\" % (self.corr_fix.array_name, self.instrument)\n  165              )\n  166:         except Exception:\n  167              errmsg = \"No running instrument on array: %s, Exiting....\" % self.corr_fix.array_name\n  168              self.logger.exception(errmsg)\n  ...\n  188              self.Step(\"Set and confirm accumulation period via CAM interface.\")\n  189              self.Progress(\"Accumulation time set to {:.3f} seconds\".format(acc_time))\n  190:         except Exception as e:\n  191              self.Error(\"Failed to set accumulation time.\", exc_info=True)\n  192  \n  ...\n  239              self.n_chans_selected = int(_test_dump.get(\"n_chans_selected\", self.cam_sensors.get_value(\"n_chans\")))\n  240              self.logger.info(\"Confirmed number of channels %s, from initial dump\" % self.n_chans_selected)\n  241:         except Exception as e:\n  242              self.Error(str(e), exc_info=True)\n  243              return False\n  ...\n 1190              FNULL = open(os.devnull, \"w\")\n 1191              subprocess.check_call([\"pgrep\", \"-fol\", \"corr2_sensor_servlet.py\"], stdout=FNULL, stderr=FNULL)\n 1192:         except Exception:\n 1193              self.Error(\"Sensor_Servlet PID could not be discovered, might not be running.\",\n 1194                  exc_info=True)\n ....\n 1206                  try:\n 1207                      reply, informs = self.corr_fix.katcp_rct_sensor.req.sensor_value(timeout=30)\n 1208:                 except Exception:\n 1209                      reply, informs = self.katcp_req.sensor_value(timeout=30)\n 1210                  time.sleep(10)\n ....\n 1216                  sorted(list(set([i.arguments[2] for i in informs if \"warn\" in i.arguments[-2]])))\n 1217              )\n 1218:         except Exception:\n 1219              self.Note(\"Could not retrieve sensors via CAM interface.\")\n 1220          else:\n ....\n 1347              #            reply_, informs = self.katcp_req.sensor_value()\n 1348              #        assert reply_.reply_ok()\n 1349:             #    except Exception:\n 1350              #        self.logger.exception('Weirdly I could not get the sensor values')\n 1351              #    else:\n ....\n 1369              #        cam_max_load_time)\n 1370              # Aqf.less(cmd_load_time, cam_max_load_time, msg)\n 1371:         except Exception:\n 1372              self.Failed(errmsg, exc_info=True)\n 1373              return\n ....\n 1386                  dump = self.receiver.data_queue.get()\n 1387                  self.assertIsInstance(dump, dict)\n 1388:             except Exception:\n 1389                  errmsg = \"Could not retrieve clean SPEAD accumulation: Queue might be Empty.\"\n 1390                  self.Failed(errmsg, exc_info=True)\n ....\n 1437                  dump = self.receiver.data_queue.get()\n 1438                  self.assertIsInstance(dump, dict)\n 1439:             except Exception:\n 1440                  errmsg = \"Could not retrieve clean SPEAD accumulation: Queue might be Empty.\"\n 1441                  self.Error(errmsg, exc_info=True)\n ....\n 1742              initial_dump = self.receiver.get_clean_dump(discard=5)\n 1743              self.assertIsInstance(initial_dump, dict)\n 1744:         except Exception:\n 1745              errmsg = \"Could not retrieve initial clean SPEAD accumulation: Queue is Empty.\"\n 1746              self.logger.exception(errmsg)\n ....\n 1870                          deng_timestamp = float(self.dhost.registers.sys_clkcounter.read().get(\"timestamp\"))\n 1871                          assert isinstance(deng_timestamp, float)\n 1872:                     except Exception:\n 1873                          errmsg = \"Could not retrieve clean queued accumulation for freq(%s @ %s: \" \"%s MHz).\" % (\n 1874                              i + 1,\n ....\n 2001                  att_bw = actual_test_freqs[att_bw_min_max[-1]] - actual_test_freqs[att_bw_min_max[0]]\n 2002  \n 2003:             except Exception:\n 2004                  msg = (\n 2005                      \"Could not compute if, CBF performs channelisation such that the 53dB \"\n ....\n 2237                  power_logger.setName(\"CBF Power Consumption\")\n 2238                  self.addCleanup(power_logger.stop)\n 2239:             except Exception:\n 2240                  errmsg = \"Failed to start power usage logging.\"\n 2241                  self.Error(errmsg, exc_info=True)\n ....\n 2445                  heading(\"CBF Power Consumption\")\n 2446                  self._process_power_log(start_timestamp, power_log_file)\n 2447:             except Exception:\n 2448                  msg = \"Failed to read/decode the PDU log.\"\n 2449                  self.Error(msg, exc_info=True)\n ....\n 2532              ori_source_name = reply_.arguments[1:]\n 2533              self.Progress(\"Original source names: {}\".format(\", \".join(ori_source_name)))\n 2534:         except Exception:\n 2535              self.Error(\"Failed to retrieve input labels via CAM interface\", exc_info=True)\n 2536          try:\n ....\n 2538              reply, _ = self.katcp_req.input_labels(*local_src_names)\n 2539              assert reply.reply_ok()\n 2540:         except Exception:\n 2541              self.Failed(\"Could not retrieve new source names via CAM interface:\\n %s\" % (str(reply)))\n 2542          else:\n ....\n 2632                      reply, _ = self.katcp_req.gain_all(0)\n 2633                      assert reply.reply_ok()\n 2634:                 except Exception:\n 2635                      self.Error(\"Failed to set equalisations on all F-engines\", exc_info=True)\n 2636                  else:\n ....\n 2642                      assert reply.reply_ok()\n 2643                      eq_values = reply.arguments[-1]\n 2644:                 except Exception:\n 2645                      self.Failed(\"Failed to retrieve gains/equalisations.\")\n 2646                  else:\n ....\n 2713                          # test_dump = self.receiver.get_clean_dump()\n 2714                          self.assertIsInstance(test_dump, dict)\n 2715:                     except Exception:\n 2716                          errmsg = \"Could not retrieve clean SPEAD accumulation, as Queue is Empty.\"\n 2717                          self.Error(errmsg, exc_info=True)\n ....\n 2913              test_dump = self.receiver.get_clean_dump(discard=50)\n 2914              assert isinstance(test_dump, dict)\n 2915:         except Exception:\n 2916              errmsg = \"Could not retrieve clean SPEAD accumulation, as Queue is Empty.\"\n 2917              self.Error(errmsg, exc_info=True)\n ....\n 2943                              this_freq_dump = self.receiver.get_clean_dump(discard=20)\n 2944                              assert isinstance(this_freq_dump, dict)\n 2945:                         except Exception:\n 2946                              errmsg = \"Could not retrieve clean SPEAD accumulation: Queue is Empty.\"\n 2947                              self.Error(errmsg, exc_info=True)\n ....\n 2959                              this_freq_dump = self.receiver.get_clean_dump(discard=20)\n 2960                              assert isinstance(this_freq_dump, dict)\n 2961:                         except Exception:\n 2962                              errmsg = \"Could not retrieve clean SPEAD accumulation: Queue is Empty.\"\n 2963                              self.Error(errmsg, exc_info=True)\n ....\n 3295                          #            reply, informs = self.katcp_req.sensor_value()\n 3296                          #        assert reply.reply_ok()\n 3297:                         #    except Exception:\n 3298                          #        self.Error('Weirdly I couldnt get the sensor values', exc_info=True)\n 3299                          #    else:\n ....\n 3319                          #      .format(cmd_load_time, cam_max_load_time, int_time))\n 3320                          # Aqf.less(cmd_load_time, cam_max_load_time, msg)\n 3321:                     except Exception as e:\n 3322                          self.Failed(errmsg + \" Exception: {}\".format(e))\n 3323                          self.Error(errmsg, exc_info=True)\n ....\n 3338                              \"after %s number of discards \\n\" % (dump[\"dump_timestamp_readable\"], _num_discards)\n 3339                          )\n 3340:                     except Exception:\n 3341                          errmsg = \"Could not retrieve clean SPEAD accumulation: Queue is Empty.\"\n 3342                          self.Error(errmsg, exc_info=True)\n ....\n 3455                                      actual_phases[count][5:-5], expected_phases_[count][5:-5], msg, degree\n 3456                                  )\n 3457:                             except Exception:\n 3458                                  Aqf.array_abs_error(\n 3459                                      actual_phases[count][5:-5],\n ....\n 3462                                      degree,\n 3463                                  )\n 3464:                     except Exception as e:\n 3465                          self.Failed(e.message)\n 3466                          self.Error(e.message, exc_info=True)\n 3467                          return\n 3468:             except Exception as e:\n 3469                  self.Failed(e.message)\n 3470                  self.Error(e.message, exc_info=True)\n ....\n 3517              try:\n 3518                  assert self.katcp_req.transient_buffer_trigger.is_active()\n 3519:             except Exception:\n 3520                  errmsg = \"CBF Transient buffer ready for triggering\" \"'Not' implemented in this release.\\n\"\n 3521                  self.Error(errmsg, exc_info=True)\n ....\n 3576              fft_shift = int(reply.arguments[-1])\n 3577              self.Progress(\"Current system FFT Shift: %s\" % fft_shift)\n 3578:         except Exception:\n 3579              self.Error(\"Could not get the F-Engine FFT Shift value\", exc_info=True)\n 3580              return\n ....\n 3588                      reply, informs = self.katcp_req.sensor_value(timeout=60)\n 3589                  assert reply.reply_ok()\n 3590:         except Exception:\n 3591              msg = \"Failed to retrieve sensor values via CAM interface\"\n 3592              self.Error(msg, exc_info=True)\n ....\n 3616                      reply, informs = self.katcp_req.sensor_value()\n 3617                  assert reply.reply_ok()\n 3618:         except Exception:\n 3619              msg = \"Failed to retrieve sensor values via CAM interface\"\n 3620              self.Error(msg, exc_info=True)\n ....\n 3631              assert reply.reply_ok()\n 3632              Aqf.passed(\"FFT Shift: %s restored.\" % fft_shift)\n 3633:         except Exception:\n 3634              self.Error(\"Could not set the F-Engine FFT Shift value\", exc_info=True)\n 3635              return\n ....\n 3795          try:\n 3796              internal_accumulations = int(self.cam_sensors.get_value(\"xeng_acc_len\"))\n 3797:         except Exception as e:\n 3798              errmsg = \"Failed to retrieve X-engine accumulation length: %s.\" % str(e)\n 3799              self.Error(errmsg, exc_info=True)\n ....\n 3802              initial_dump = self.receiver.get_clean_dump()\n 3803              assert isinstance(initial_dump, dict)\n 3804:         except Exception:\n 3805              errmsg = \"Could not retrieve clean SPEAD accumulation: Queue is Empty.\"\n 3806              self.Failed(errmsg)\n ....\n 3821              assert reply.reply_ok()\n 3822              Aqf.hop(\"Gain successfully set on input %s via CAM interface.\" % test_input)\n 3823:         except Exception:\n 3824              errmsg = \"Gains/Eq could not be set on input %s via CAM interface\" % test_input\n 3825              self.Failed(errmsg)\n ....\n 3851              assert reply.reply_ok()\n 3852              informs = informs[0]\n 3853:         except Exception:\n 3854              errmsg = \"Failed to retrieve quantiser snapshot of input %s via \" \"CAM Interface: \\nReply %s\" % (\n 3855                  test_input,\n ....\n 3887                      reply = self.katcp_req.accumulation_length(acc_time, timeout=60)\n 3888                      assert reply.succeeded\n 3889:                 except Exception:\n 3890                      self.Failed(\n 3891                          \"Failed to set accumulation length of {} after maximum vacc \"\n ....\n 3909                          dump = self.receiver.get_clean_dump()\n 3910                          assert isinstance(dump, dict)\n 3911:                     except Exception:\n 3912                          errmsg = \"Could not retrieve clean SPEAD accumulation: Queue is Empty.\"\n 3913                          self.Failed(errmsg)\n ....\n 4436                          reply, _informs = self.katcp_req.delays(t_apply, *delay_coefficients)\n 4437                          assert reply.reply_ok()\n 4438:                     except Exception:\n 4439                          errmsg = \"%s\" % str(reply).replace(\"\\_\", \" \")\n 4440                          self.Failed(errmsg)\n ....\n 4450                          )\n 4451                          dump = self.receiver.get_clean_dump(discard=35)\n 4452:                     except Exception:\n 4453                          errmsg = \"Could not retrieve clean SPEAD accumulation: Queue is Empty.\"\n 4454                          self.Failed(errmsg)\n ....\n 4570              #            reply, informs = self.katcp_req.sensor_value()\n 4571              #        assert reply.reply_ok()\n 4572:             #    except Exception:\n 4573              #        self.Error('Weirdly I couldnt get the sensor values', exc_info=True)\n 4574              #    else:\n ....\n 4583              #    time.sleep(1)\n 4584  \n 4585:         except Exception:\n 4586              errmsg = \"%s: Failed to set delays via CAM interface with load-time: %s, \" \"Delay coefficients: %s\" % (\n 4587                  str(reply),\n ....\n 4662                  corr2_version = \"\".join([i for i in corr2_version.split(\".\") if len(i) == 7])\n 4663                  corr2_link = \"https://github.com/ska-sa/%s/commit/%s\" % (corr2_name, corr2_version)\n 4664:             except Exception:\n 4665                  corr2_link = \"Not Version Controlled at this time.\"\n 4666  \n ....\n 4672                  casper_version = \"\".join([i for i in casper_version.split(\".\") if len(i) == 7])\n 4673                  casper_link = \"https://github.com/ska-sa/%s/commit/%s\" % (casper_name, casper_version)\n 4674:             except Exception:\n 4675                  casper_link = \"Not Version Controlled at this time.\"\n 4676  \n ....\n 4683                  assert len(katcp_version) == 7\n 4684                  katcp_link = \"https://github.com/ska-sa/%s-python/commit/%s\" % (katcp_name, katcp_version)\n 4685:             except Exception:\n 4686                  katcp_link = \"https://github.com/ska-sa/%s/releases/tag/v%s\" % (katcp_name, katcp_version)\n 4687  \n ....\n 4694                  spead2_version = \"\".join([i for i in spead2_version.split(\".\") if len(i) == 7])\n 4695                  spead2_link = \"https://github.com/ska-sa/%s/commit/%s\" % (spead2_name, spead2_version)\n 4696:             except Exception:\n 4697                  spead2_link = \"https://github.com/ska-sa/%s/releases/tag/v%s\" % (spead2_name, spead2_version)\n 4698  \n ....\n 4705                  assert len(mkat_version) == 7\n 4706                  mkat_link = \"https://github.com/ska-sa/%s/commit/%s\" % (mkat_name, mkat_version)\n 4707:             except Exception:\n 4708                  mkat_name = \"mkat_fpga\"\n 4709                  mkat_link = \"Not Version Controlled at this time.\"\n ....\n 4729                  assert len(config_version) == 7\n 4730                  config_link = \"https://github.com/ska-sa/%s/commit/%s\" % (config_dir_name, config_version)\n 4731:             except Exception:\n 4732                  config_dir_name = \"mkat_config_templates\"\n 4733                  config_version = \"Not Version Controlled\"\n ....\n 4787                  else:\n 4788                      self.Progress(\"Repo: %s | Git Tag: %s | GitHub: %s\" % (name, repo_dir[0], repo_dir[1]))\n 4789:             except Exception:\n 4790                  pass\n 4791  \n ....\n 4827                  test_dump = self.receiver.get_clean_dump()\n 4828                  assert isinstance(test_dump, dict)\n 4829:             except Exception:\n 4830                  errmsg = \"Could not retrieve clean SPEAD accumulation, as Queue is Empty.\"\n 4831                  self.Failed(errmsg)\n ....\n 4903                  self.Failed(errmsg)\n 4904                  return False\n 4905:             except Exception as e:\n 4906                  errmsg = \"Exception: {}\".format(str(e))\n 4907                  self.Failed(errmsg)\n ....\n 4943                  self.Failed(errmsg)\n 4944                  return False\n 4945:             except Exception as e:\n 4946                  errmsg = \"Exception: {}\".format(str(e))\n 4947                  self.Failed(errmsg)\n ....\n 5025                      plot_type=\"bf\",\n 5026                  )\n 5027:             except Exception as e:\n 5028                  self.Failed(str(e))\n 5029  \n ....\n 5090              reply, informs = self.katcp_req.gain(test_input, base_gain)\n 5091              assert reply.reply_ok()\n 5092:         except Exception as e:\n 5093              self.Failed(\"Gain correction on %s could not be set to %s.: \" \"KATCP Reply: %s\" % (test_input, gain, reply))\n 5094              return False\n ....\n 5099              self.assertIsInstance(initial_dump, dict)\n 5100              assert np.any(initial_dump[\"xeng_raw\"])\n 5101:         except Exception:\n 5102              errmsg = \"Could not retrieve clean SPEAD accumulation, as Queue is Empty.\"\n 5103              self.Failed(errmsg)\n ....\n 5126                  reply, informs = self.katcp_req.gain(test_input, *gain_vector, timeout=60)\n 5127                  assert reply.reply_ok()\n 5128:             except Exception as e:\n 5129                  self.Failed(\n 5130                      \"Gain correction on %s could not be set to %s.: \" \"KATCP Reply: %s\" % (test_input, gain, reply)\n ....\n 5263              self.Failed(errmsg)\n 5264              return False\n 5265:         except Exception as e:\n 5266              errmsg = \"Exception: {}\".format(str(e))\n 5267              self.Failed(errmsg)\n ....\n 5301              self.Failed(errmsg)\n 5302              return False\n 5303:         except Exception as e:\n 5304              errmsg = \"Exception: {}\".format(str(e))\n 5305              self.Failed(errmsg)\n ....\n 5352                  ingest_kcp_client.stop()\n 5353                  raise RuntimeError(errmsg)\n 5354:         except Exception as e:\n 5355              self.Error(str(e), exc_info=True)\n 5356              self.Failed(str(e))\n ....\n 5371                  )\n 5372                  assert reply.reply_ok()\n 5373:             except Exception as e:\n 5374                  print e\n 5375                  errmsg = \"Failed to issues ingest node capture-init: {}\".format(str(reply))\n ....\n 5445                          if (len(in_wgts) == 0) and (isinstance(act_wgts, dict)):\n 5446                              in_wgts = act_wgts.copy()\n 5447:                     except Exception as e:\n 5448                          self.Failed(\n 5449                              \"Confirm that the Docker container is running and also confirm the \" \"igmp version = 2\"\n ....\n 5503                              else:\n 5504                                  raw_idx = raw_idx + spectra_per_heap\n 5505:                 except Exception as e:\n 5506                      errmsg = \"Failed to capture beam data due to error: %s\" % str(e)\n 5507                      self.Error(errmsg, exc_info=True)\n ....\n 5673                  # Use weights from previous test\n 5674                  d, l, rl, exp0, nc, act_wgts, dummy = get_beam_data(beam, beam_dict=beam_dict, conf_data_type=True)\n 5675:             except Exception as e:\n 5676                  errmsg = \"Failed to retrieve beamformer data\"\n 5677                  self.Failed(errmsg)\n ....\n 5713                          return False\n 5714                      continue\n 5715:                 except Exception as e:\n 5716                      retry_cnt += 1\n 5717                      errmsg = \"Test failed due to %s\" % str(e)\n ....\n 5737                          \"(using reference value) = {:.2f}\".format(cap_mean, exp_mean)\n 5738                      )\n 5739:                 except Exception as e:\n 5740                      errmsg = \"Failed to retrieve beamformer data\"\n 5741                      self.Failed(errmsg)\n ....\n 5773              try:\n 5774                  d, l, rl, exp1, nc, act_wgts, dummy = get_beam_data(beam, beam_dict, rl)\n 5775:             except Exception as e:\n 5776                  errmsg = \"Failed to retrieve beamformer data: %s\" % str(e)\n 5777                  self.Failed(errmsg)\n ....\n 5784              try:\n 5785                  d, l, rl, exp0, nc, act_wgts, dummy = get_beam_data(beam, beam_dict, rl)\n 5786:             except Exception as e:\n 5787                  errmsg = \"Failed to retrieve beamformer data\"\n 5788                  self.Failed(errmsg)\n ....\n 5819                  # Use weights from previous test\n 5820                  d, l, rl, exp0, nc, act_wgts, dummy = get_beam_data(beam, beam_quant_gain=bq_gain, act_wgts=act_wgts)\n 5821:             except Exception as e:\n 5822                  errmsg = \"Failed to retrieve beamformer data: %s\" % str(e)\n 5823                  self.Failed(errmsg)\n ....\n 5834                      beam, inp_ref_lvl=rl, beam_quant_gain=bq_gain, act_wgts=act_wgts\n 5835                  )\n 5836:             except Exception as e:\n 5837                  errmsg = \"Failed to retrieve beamformer data: %s\" % str(e)\n 5838                  self.Failed(errmsg)\n ....\n 5931                      if failed:\n 5932                          aligned_failed = True\n 5933:                 except Exception as e:\n 5934                      errmsg = \"Failed to retrieve beamformer data\"\n 5935                      self.Failed(errmsg)\n ....\n 5998              self.Failed(errmsg)\n 5999              return False\n 6000:         except Exception as e:\n 6001              errmsg = \"Exception: {}\".format(str(e))\n 6002              self.Failed(errmsg)\n ....\n 6036              self.Failed(errmsg)\n 6037              return False\n 6038:         except Exception as e:\n 6039              errmsg = \"Exception: {}\".format(str(e))\n 6040              self.Failed(errmsg)\n ....\n 6275              self.Failed(errmsg)\n 6276              return False\n 6277:         except Exception as e:\n 6278              errmsg = \"Exception: {}\".format(str(e))\n 6279              self.Failed(errmsg)\n ....\n 6313              self.Failed(errmsg)\n 6314              return False\n 6315:         except Exception as e:\n 6316              errmsg = \"Exception: {}\".format(str(e))\n 6317              self.Failed(errmsg)\n ....\n 6363                  ingest_kcp_client.stop()\n 6364                  raise RuntimeError(errmsg)\n 6365:         except Exception as e:\n 6366              self.Error(str(e), exc_info=True)\n 6367              self.Failed(str(e))\n ....\n 6396                      self, beam, ingest_kcp_client=ingest_kcp_client, stop_only=True\n 6397                  )\n 6398:             except Exception as e:\n 6399                  errmsg = (\n 6400                      \"Failed to capture beam data: %s\\n\\n Confirm that Docker container is \"\n ....\n 6556              try:\n 6557                  assert future_mcount\n 6558:             except Exception:\n 6559                  return False\n 6560              trgt_spectra_idx = np.where(bf_ts > future_mcount)[0]\n ....\n 6636              else:\n 6637                  raise Exception\n 6638:         except Exception as e:\n 6639              self.Failed(e)\n 6640              return\n ....\n 6682          try:\n 6683              reply, informs = self.katcp_req.quantiser_snapshot(inp, timeout=60)\n 6684:         except Exception:\n 6685              self.Failed(\"Failed to grab quantiser snapshot.\")\n 6686          quant_snap = [eval(v) for v in (reply.arguments[1:][1:])]\n 6687          try:\n 6688              reply, informs = self.katcp_req.adc_snapshot(inp, timeout=60)\n 6689:         except Exception:\n 6690              self.Failed(\"Failed to grab adc snapshot.\")\n 6691          fpga = self.correlator.fhosts[0]\n ....\n 7195                  self.Error(errmsg, exc_info=True)\n 7196                  return False\n 7197:             except Exception as e:\n 7198                  errmsg = \"Exception: {}\".format(str(e))\n 7199                  self.Failed(errmsg)\n ....\n 7213                  self.Error(errmsg, exc_info=True)\n 7214                  return False\n 7215:             except Exception as e:\n 7216                  errmsg = \"Exception: {}\".format(str(e))\n 7217                  self.Failed(errmsg)\n ....\n 7229                  self.Error(errmsg, exc_info=True)\n 7230                  return False\n 7231:             except Exception as e:\n 7232                  errmsg = \"Exception: {}\".format(str(e))\n 7233                  self.Failed(errmsg)\n ....\n 7247              self.Error(errmsg, exc_info=True)\n 7248              return False\n 7249:         except Exception as e:\n 7250              errmsg = \"Exception: {}\".format(str(e))\n 7251              self.Failed(errmsg)\n ....\n 7379              self.Failed(errmsg)\n 7380              self.Error(errmsg, exc_info=True)\n 7381:         except Exception as e:\n 7382              errmsg = \"Exception: {}\".format(str(e))\n 7383              self.Failed(errmsg)\n ....\n 7627              assert reply.reply_ok()\n 7628              Aqf.passed(\"Transient buffer trigger present.\")\n 7629:         except Exception:\n 7630              self.Failed(\"Transient buffer trigger failed. \\nReply: %s\" % str(reply).replace(\"_\", \" \"))\n 7631  \n ....\n 7638              assert reply.reply_ok()\n 7639              informs = informs[0]\n 7640:         except Exception:\n 7641              self.Error(\"Failed to capture ADC snapshot.\", exc_info=True)\n 7642              self.Failed(\"Failed to capture ADC snapshot. \\nReply: %s\" % str(reply).replace(\"_\", \" \"))\n ....\n 7754                  initial_dump = self.receiver.get_clean_dump()\n 7755                  self.assertIsInstance(initial_dump, dict)\n 7756:             except Exception:\n 7757                  errmsg = \"Could not retrieve clean SPEAD accumulation: Queue is Empty.\"\n 7758                  self.Error(errmsg, exc_info=True)\n ....\n 7850                              queued_dump = self.receiver.data_queue.get(timeout=DUMP_TIMEOUT)\n 7851                              self.assertIsInstance(queued_dump, dict)\n 7852:                         except Exception:\n 7853                              errmsg = \"Could not retrieve clean accumulation.\"\n 7854                              self.Error(errmsg, exc_info=True)\n ....\n 7976                  assert \"CBF\" in csv_file\n 7977                  pfb_data = np.loadtxt(csv_file, delimiter=\",\", unpack=False)\n 7978:             except Exception:\n 7979                  msg = \"Failed to load CBF_Efficiency_Data.csv file\"\n 7980                  self.Error(msg, exc_info=True)\n ....\n 7989              binwidth = self.cam_sensors.get_value(\"bandwidth\") / (self.n_chans_selected - 1)\n 7990              efficiency_calc(requested_test_freqs, chan_responses, binwidth)\n 7991:         except Exception:\n 7992              msg = \"Could not compute the data, rerun test\"\n 7993              self.Error(msg, exc_info=True)\n ....\n 8361              if reply.reply_ok():\n 8362                  inp = reply.arguments[1:][0]\n 8363:         except Exception as ex:\n 8364              print ex\n 8365              self.Failed(\"Failed to get input lables. KATCP Reply: {}\".format(reply))\n\n97 matches in 1 file\n",
					"settings":
					{
						"buffer_size": 28611,
						"line_ending": "Unix",
						"name": "Find Results",
						"scratch": true
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
				[
					[
						[
							"Packages/C++/C++ Single File.sublime-build",
							""
						],
						[
							"Packages/C++/C++ Single File.sublime-build",
							"Run"
						]
					],
					[
						"Packages/C++/C++ Single File.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Makefile/Make.sublime-build",
							""
						],
						[
							"Packages/Makefile/Make.sublime-build",
							"Clean"
						],
						[
							"Packages/Python/Python.sublime-build",
							""
						],
						[
							"Packages/Python/Python.sublime-build",
							"Syntax Check"
						],
						[
							"Packages/User/C++.sublime-build",
							""
						],
						[
							"Packages/User/C++.sublime-build",
							"Run"
						]
					],
					[
						"Packages/Python/Python.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Python/Python.sublime-build",
							""
						],
						[
							"Packages/Python/Python.sublime-build",
							"Syntax Check"
						]
					],
					[
						"Packages/Python/Python.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Python/Python.sublime-build",
							""
						],
						[
							"Packages/Python/Python.sublime-build",
							"Syntax Check"
						],
						[
							"Packages/User/C++.sublime-build",
							""
						],
						[
							"Packages/User/C++.sublime-build",
							"Run"
						]
					],
					[
						"Packages/Python/Python.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/User/C++.sublime-build",
							""
						],
						[
							"Packages/User/C++.sublime-build",
							"Run"
						]
					],
					[
						"Packages/User/C++.sublime-build",
						"Run"
					]
				]
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 392.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"Package Control: ",
						"Package Control: Install Package"
					],
					[
						"Package Control: ins",
						"Package Control: Install Package"
					],
					[
						"in",
						"Package Control: Install Package"
					],
					[
						"pac",
						"Package Control: Install Package"
					],
					[
						"outli",
						"Browse Mode: Outline (Left)"
					],
					[
						"instal",
						"Package Control: Install Package"
					],
					[
						"Snippet: ",
						"Snippet: #include <…>"
					],
					[
						"insta",
						"Package Control: Install Package"
					],
					[
						"Snippet: int",
						"Snippet: printf …"
					],
					[
						"install",
						"Package Control: Install Package"
					],
					[
						"Package Control: install",
						"Package Control: Install Package"
					],
					[
						"ins",
						"Package Control: Install Package"
					],
					[
						"menu",
						"View: Toggle Menu"
					],
					[
						"Snippet: ip",
						"Snippet: ipython"
					],
					[
						"Snippet:",
						"Snippet: __magic__"
					],
					[
						"parkage",
						"Package Control: Install Package"
					],
					[
						"python",
						"Set Syntax: Python"
					]
				],
				"width": 551.0
			},
			"console":
			{
				"height": 502.0,
				"history":
				[
					"exit",
					"ls"
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"expanded_folders":
			[
				"/home/mmphego/mnt/cmc3/usr/local/src",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests",
				"/home/mmphego/mnt/cmc3/srv/corr2",
				"/home/mmphego/mnt/cmc3/home/alec/katsdpingest",
				"/home/mmphego/mnt/cmc3/home/mmphego/learning_fast"
			],
			"file_history":
			[
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/Logger.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/logger.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/test_cbf.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/utils.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/__init__.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/scripts/corr2_rx.py",
				"/home/mmphego/mnt/cmc3/home/alec/katsdpingest/katsdpingest/receiver.py",
				"/home/mmphego/mnt/cmc3/srv/casperfpga/build/lib.linux-x86_64-2.7/casperfpga/casperfpga.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/aqf_utils.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/fxcorrelator_fengops.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/fxcorrelator.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/build/lib.linux-x86_64-2.7/corr2/instrument.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/beam.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/fhost_fpga.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/fxcorrelator_bengops.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/xhost_fpga.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/sensors.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/fxcorrelator_xengops.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/fxcorrelator_filterops.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/filthost_fpga.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/corr2/corr2LogHandlers.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/bhost_fpga.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/data_stream.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/build/lib.linux-x86_64-2.7/corr2/dsimhost_fpga.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/host_fpga.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/build/lib.linux-x86_64-2.7/corr2/fxcorrelator.py",
				"/home/mmphego/mnt/cmc3/srv/casperfpga/src/transport_skarab.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/.venv/lib/python2.7/site-packages/casperfpga/transport_skarab.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/.venv/lib/python2.7/site-packages/corr2/fxcorrelator.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/build/lib.linux-x86_64-2.7/corr2/fhost_fpga.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/.venv/lib/python2.7/site-packages/corr2/host_fpga.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/.venv/lib/python2.7/site-packages/corr2/fhost_fpga.py",
				"/home/mmphego/GitHub/My-Dockerfiles/fast.ai/Dockerfile",
				"/home/mmphego/GitHub/corr2/corr2/fxcorrelator.py",
				"/home/mmphego/GitHub/corr2/src/corr2LogHandlers.py",
				"/home/mmphego/GitHub/corr2/src/fxcorrelator.py",
				"/home/mmphego/GitHub/corr2/corr2/instrument.py",
				"/home/mmphego/GitHub/new_DSTV_A6_esp8266_IRRemote/.piolibdeps/ArduinoJson/third-party/catch/catch.hpp",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/Corr_RX.py",
				"/home/mmphego/GitHub/corr2/src/host_fpga.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts/delays_debugging.sh",
				"/home/mmphego/GitHub/My-Dockerfiles/fast.ai/Makefile",
				"/home/mmphego/GitHub/mmphego.github.io/_posts/2018-11-05-My-docker-container-has-no-internet.md",
				"/home/mmphego/GitHub/My-Dockerfiles/fast.ai/README.md",
				"/home/mmphego/GitHub/learning_fastai/Dockerfile",
				"/home/mmphego/mnt/cmc3/home/mmphego/learning_fast/Dockerfile",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/.coverage",
				"/home/mmphego/mnt/cmc3/srv/casperfpga/casperfpga/utils.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/dsimhost_fpga.py",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/src/sensor_poll.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/run_cbf_tests.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts/setup_virtualenv.sh",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts/pre_setup.sh",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/src/poll.py",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/Dockerfile",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/DockerfileSensorPoll",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/src/cbf_sensors_dash.py",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/Makefile",
				"/home/mmphego/mnt/cmc3/home/mmphego/temp/index.html",
				"/home/mmphego/mnt/cmc3/home/mmphego/temp/test.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/temp/flask.py",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts/Jenkins_Scripts/rx_test_4.sh",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/config/test_conf_site.ini",
				"/home/mmphego/.config/sublime-text-3/Packages/User/highlight_duplicates.sublime-settings",
				"/home/mmphego/GitHub/mmphego.github.io/_posts/2018-09-25-Automated-Qualification-Testing-for-the-64-Antennas-MeerKAT-Correlator-Beamformer.md",
				"/home/mmphego/Dropbox/MEng_Stuff/CPUT Logistics/ITS CPUT Logins",
				"/home/mmphego/Dropbox/BTech Project/Proposal and Reports 2015/Final Report/test.tex",
				"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Notes/Section B/Literature-Review.md",
				"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Proposal_Latex/misc/abbreviations.tex",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/README.md",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-Tests-Automation/Makefile",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/json_dumps/sensor_values.json",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/src/pip-requirements.txt",
				"/home/mmphego/mnt/cmc3/srv/corr2/scripts/corr2_sensor_servlet.py",
				"/home/mmphego/GitHub/mmphego.github.io/_posts/2018-10-23-How-I-configured-JenkinsCI-server-in-a-Docker-container-2.md",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-Tests-Automation/readme.md",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-Tests-Automation/Dockerfile",
				"/home/mmphego/GitHub/mmphego.github.io/_posts/2018-08-28-How-I-configured-JenkinsCI-server-in-a-Docker-container-2.md",
				"/home/mmphego/GitHub/mmphego.github.io/_posts/2018-08-20-How-I-configured-JenkinsCI-server-in-a-Docker-container.md",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/Jenkinsfile",
				"/home/mmphego/mnt/cmc3/usr/local/src/CBF-Tests-Automation/fabfile.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/src/corr2LogHandlers.py",
				"/tmp/mozilla_mmphego0/code.py",
				"/home/mmphego/mnt/cmc3/usr/local/src/git-hooks/hooks/pre-commit",
				"/home/mmphego/mnt/cmc3/usr/local/src/nosekatreport/nosekatreport/decorators.py",
				"/home/mmphego/GitHub/mmphego.github.io/_posts/2018-10-22-Better-Git-Commit-Messages-using-Templates.md",
				"/tmp/mozilla_mmphego0/dbelab06ProfilerResultsSortedByNoCalls.txt",
				"/home/mmphego/mnt/cmc3/usr/local/src/git-hooks/templates/README.md",
				"/home/mmphego/.cache/.fr-R9JoZp/WhatsApp Chat with Mpho.txt",
				"/home/mmphego/mnt/cmc3/usr/local/src/git-hooks/README.md",
				"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Tests/example.bib",
				"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Tests/main.tex",
				"/home/mmphego/.cache/.fr-vRhRD6/main.tex",
				"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Tests/Appendices/AppendixA.tex",
				"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Tests/Appendices/AppendixTemplate.tex",
				"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Tests/main.aux",
				"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Tests/MastersThesis.cls",
				"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Tests/MastersDoctoralThesis.cls",
				"/home/mmphego/Dropbox/MEng_Stuff/Tests/Chapters/ChapterTemplate.tex",
				"/home/mmphego/Dropbox/MEng_Stuff/Tests/Chapters/.Chapter1.tex.swp",
				"/home/mmphego/Dropbox/MEng_Stuff/Tests/Chapters/Chapter1.tex",
				"/home/mmphego/.cache/.fr-nEtW8x/LibreOffice_6.1.2.1_Linux_x86-64_deb/readmes/README_en-US",
				"/home/mmphego/mnt/cmc3/srv/corr2/scripts/test.txt",
				"/home/mmphego/mnt/cmc3/srv/corr2/debug/vaccbug/inspect_rx_packets.py",
				"/home/mmphego/.cache/.fr-WV1LlY/python-data-science/03-matplotlib/02-matplotlib-subplots.ipynb",
				"/home/mmphego/mnt/cmc3/srv/corr2/build/scripts-2.7/corr2_rx.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/scripts/corr2_dsim_control.py",
				"/home/mmphego/mnt/cmc3/srv/casperfpga/src/casperfpga.py",
				"/home/mmphego/mnt/cmc3/srv/corr2/corr2/host_fpga.py",
				"/home/mmphego/mnt/cmc3/srv/casperfpga/src/transport_tapcp.py",
				"/tmp/mozilla_mmphego0/errorband_lineplots.py",
				"/home/mmphego/GitHub/mmphego.github.io/must-watch-talks.md",
				"/home/mmphego/GitHub/linkedin/http_api.py",
				"/home/mmphego/GitHub/linkedin/.env",
				"/home/mmphego/mnt/cmc3/home/alec/katsdpingest/spead2/examples/test_recv.py",
				"/home/mmphego/Python/python-data-science/Makefile",
				"/home/mmphego/GitHub/linkedin/linkedin.py",
				"/home/mmphego/Python/python-data-science/README.md",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts/spead2_rx_debug.py",
				"/home/mmphego/GitHub/mmphego.github.io/resume.html",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/Makefile",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts/Jenkins_Scripts/init_instrument_3.sh",
				"/home/mmphego/GitHub/mmphego.github.io/_data/resume.yml",
				"/home/mmphego/GitHub/mmphego.github.io/mentions.md",
				"/home/mmphego/GitHub/mmphego.github.io/assets/devopsdays.jpeg",
				"/home/mmphego/.cache/.fr-rqHVKv/netl1c63x64.inf",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts/Jenkins_Scripts/check_dep_2.sh",
				"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts/Jenkins_Scripts/install_dep_1.sh"
			],
			"find":
			{
				"height": 39.0
			},
			"find_in_files":
			{
				"height": 352.0,
				"where_history":
				[
					"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/test_cbf.py",
					"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests",
					"/home/mmphego/mnt/cmc3/srv/casperfpga",
					"/home/mmphego/mnt/cmc3/srv/corr2/src",
					"/home/mmphego/mnt/cmc3/usr/local/src/CBF-System-Dashboard/src",
					"/home/mmphego/GitHub/mmphego.github.io",
					"/home/mmphego/mnt/cmc3/srv/corr2",
					"/home/mmphego/mnt/cmc3/srv/casperfpga/src",
					"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests",
					"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests",
					"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests",
					"/home/mmphego/mnt/cmc3/srv/casperfpga",
					"/home/mmphego/mnt/cmc3/srv/corr2/src",
					"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests",
					"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/scripts",
					"/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests",
					"/home/mmphego/mnt/cmc3/usr/local/src/CBF-Tests-Automation",
					"/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Notes/Summarised.Papers",
					"/home/mmphego/mnt/cmc3/usr/local/src/CBF-Tests-Automation",
					"/home/mmphego/mnt/cmc1/home/avnuser/AVNTests/AVNTests/avn_tests",
					"/home/mmphego/mnt/cmc1/home/avnuser/AVNTests/AVNTests",
					"/home/mmphego/mnt/cmc3/usr/local/src/katcp-python",
					"/home/mmphego/mnt/cmc3/usr/local/src/corr2",
					"/home/mmphego/mnt/cmc3/usr/local/src/corr2/src"
				]
			},
			"find_state":
			{
				"case_sensitive": true,
				"find_history":
				[
					"self.Failed(errmsg)\nself.Error(errmsg, exc_info=True)",
					"self.Failed(errmsg)\nself.Error(errmsg, exc_info=True)\n",
					"self.Error(errmsg, exc_info=True)",
					"            self.Failed(errmsg)\n            self.Error(errmsg, exc_info=True)\n",
					"            errmsg = \"Exception\"\n            self.Failed(errmsg)\n",
					"\"Exception: {}\".format(str(e))",
					"self.Failed(errmsg)",
					"self.Error(errmsg, exc_info=True)",
					"\n            ",
					"self.Error(errmsg, exc_info=True)\n",
					"self.Error(errmsg, exc_info=True)",
					"self.logger.error(errmsg)",
					"%s\" % str(e)",
					"TypeError as e",
					"except Exception as e",
					"            self.Failed(errmsg)\n",
					"except E",
					"Aqf.note",
					"            self.Failed(errmsg)\n",
					"self.Failed(errmsg)",
					"except",
					"self.logger.exception",
					"exc_info=True",
					"Aqf.failed",
					"Aqf.progress",
					"Aqf.step",
					"_logLevel",
					"get_username",
					"setLevel",
					"self.logger",
					"LOGGER",
					"getLogger",
					"LOGGER",
					"setlevel",
					"setLe",
					"LOGGER",
					"_logLevel",
					"LOGGER",
					"set_input_levels",
					"add_cleanup",
					"LOGGER",
					"self._frames",
					"_read_stream",
					"get_delay_bounds",
					"DTIME",
					"pdebug",
					"corr_config",
					"raise",
					"CorrReceiver",
					"print ",
					"LoggingClass",
					"handler",
					"self",
					"corr_instance",
					"self",
					"DictObject",
					"evaluate_corr",
					"#!/",
					"test_heading",
					"logging.ERROR",
					"ERROR",
					"logging.ERROR",
					"ERROR",
					"logging.ERROR",
					"IPyt",
					"FEngineOperations",
					"LOGGER",
					"IPython",
					"self.init",
					"initialise",
					"FEngineOperations",
					"configure",
					"logging.INFO",
					"log_level=INFO",
					"INFO",
					"getLogger",
					"logLevel",
					"INFO",
					"FpgaHost",
					"IPy",
					"FpgaHost",
					"SkarabTransport",
					"__init__",
					"SkarabTransport",
					"IPyth",
					"getLogger",
					"INFO",
					"getLogger",
					"INFO",
					"_create_hosts",
					"INFO",
					"info",
					"INFO",
					"\\\n",
					"IPy",
					"print",
					"_test_delay_tracking",
					"get_sensors",
					"sync_time",
					"get_sensors",
					"scale_factor_timestamp",
					"scale_f",
					"process_xeng_data",
					"logger",
					"Logger",
					"LOGGER",
					"self.logger",
					"logger",
					"Logger",
					"LOGGER",
					"_spead_stream",
					"corr2_rx",
					"corr2",
					"%i",
					"FATAL",
					"jenkins",
					"_delays_setup",
					"_test_report_config",
					"fft_shift = 511",
					"gain = \"113+0j\"",
					"awgn_scale = 0.0645",
					"cw_scale",
					"self.get_clean_dump()",
					"self.get_clean_dump",
					"get_clean_dump",
					"print (time.",
					"\n        ",
					"\n    "
				],
				"highlight": false,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
					"self.Note",
					"self.Failed",
					"self.Progress",
					"self.Step",
					"self.logger",
					"heading",
					"_logLevel",
					"self.receiver.get_clean_dump()",
					"     ",
					"SensorPoll",
					"channels",
					"network",
					"Warning -m pip",
					"$(command -v  python) -W ignore::Warning pip",
					"Section-A",
					"-",
					"avn_tests"
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": false
			},
			"folders":
			[
				{
					"path": "/home/mmphego/GitHub"
				},
				{
					"path": "/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress"
				},
				{
					"path": "/home/mmphego/mnt/cmc3/usr/local/src"
				},
				{
					"path": "/home/mmphego/Dropbox/MEng_Stuff/MEng-Progress/Notes"
				},
				{
					"path": "/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests"
				},
				{
					"path": "/home/mmphego/mnt/cmc3/srv/corr2"
				},
				{
					"path": "/home/mmphego/mnt/cmc3/srv/casperfpga"
				},
				{
					"path": "/home/mmphego/mnt/cmc3/home/alec/katsdpingest"
				},
				{
					"path": "/home/mmphego/exercism"
				},
				{
					"path": "/home/mmphego/mnt/cmc3/home/mmphego/learning_fast"
				}
			],
			"groups":
			[
				{
					"selected": 1,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/__init__.py",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 33557,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": -1,
									"bracket_highlighter.clone_locations":
									{
										"close":
										{
											"1":
											[
												2272,
												2273
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/double_quote.png",
												"region.greenish"
											]
										},
										"open":
										{
											"1":
											[
												2261,
												2262
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.clone_regions":
									[
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"function_name_status_row": 0,
									"git_gutter_is_enabled": true,
									"show_definitions": false,
									"syntax": "Packages/Python/Python.sublime-syntax",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 1171.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests/test_cbf.py",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 403055,
								"regions":
								{
								},
								"selection":
								[
									[
										343555,
										343555
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": -1,
									"bracket_highlighter.clone_locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.clone_regions":
									[
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"function_name_status_row": 7198,
									"git_gutter_is_enabled": true,
									"show_definitions": false,
									"syntax": "Packages/Python/Python.sublime-syntax",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 107380.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 2,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 28611,
								"regions":
								{
									"match":
									{
										"flags": 112,
										"regions":
										[
											[
												323,
												331
											],
											[
												628,
												636
											],
											[
												896,
												904
											],
											[
												1148,
												1156
											],
											[
												1521,
												1529
											],
											[
												1890,
												1898
											],
											[
												2183,
												2191
											],
											[
												2499,
												2507
											],
											[
												2786,
												2794
											],
											[
												3066,
												3074
											],
											[
												3346,
												3354
											],
											[
												3587,
												3595
											],
											[
												3907,
												3915
											],
											[
												4239,
												4247
											],
											[
												4625,
												4633
											],
											[
												4948,
												4956
											],
											[
												5248,
												5256
											],
											[
												5555,
												5563
											],
											[
												5869,
												5877
											],
											[
												6145,
												6153
											],
											[
												6438,
												6446
											],
											[
												6725,
												6733
											],
											[
												7033,
												7041
											],
											[
												7369,
												7377
											],
											[
												7739,
												7747
											],
											[
												8138,
												8146
											],
											[
												8529,
												8537
											],
											[
												8903,
												8911
											],
											[
												9256,
												9264
											],
											[
												9638,
												9646
											],
											[
												9912,
												9920
											],
											[
												10114,
												10122
											],
											[
												10374,
												10382
											],
											[
												10718,
												10726
											],
											[
												11005,
												11013
											],
											[
												11293,
												11301
											],
											[
												11572,
												11580
											],
											[
												11840,
												11848
											],
											[
												12151,
												12159
											],
											[
												12459,
												12467
											],
											[
												12719,
												12727
											],
											[
												13060,
												13068
											],
											[
												13374,
												13382
											],
											[
												13735,
												13743
											],
											[
												14026,
												14034
											],
											[
												14359,
												14367
											],
											[
												14571,
												14579
											],
											[
												14980,
												14988
											],
											[
												15319,
												15327
											],
											[
												15614,
												15622
											],
											[
												15992,
												16000
											],
											[
												16317,
												16325
											],
											[
												16650,
												16658
											],
											[
												16967,
												16975
											],
											[
												17170,
												17178
											],
											[
												17433,
												17441
											],
											[
												17666,
												17674
											],
											[
												17888,
												17896
											],
											[
												18105,
												18113
											],
											[
												18429,
												18437
											],
											[
												18750,
												18758
											],
											[
												19024,
												19032
											],
											[
												19237,
												19245
											],
											[
												19477,
												19485
											],
											[
												19689,
												19697
											],
											[
												20024,
												20032
											],
											[
												20360,
												20368
											],
											[
												20740,
												20748
											],
											[
												20984,
												20992
											],
											[
												21269,
												21277
											],
											[
												21557,
												21565
											],
											[
												21850,
												21858
											],
											[
												22191,
												22199
											],
											[
												22481,
												22489
											],
											[
												22749,
												22757
											],
											[
												22984,
												22992
											],
											[
												23197,
												23205
											],
											[
												23410,
												23418
											],
											[
												23623,
												23631
											],
											[
												23863,
												23871
											],
											[
												24119,
												24127
											],
											[
												24368,
												24376
											],
											[
												24580,
												24588
											],
											[
												24791,
												24799
											],
											[
												25067,
												25075
											],
											[
												25314,
												25322
											],
											[
												25561,
												25569
											],
											[
												25808,
												25816
											],
											[
												26043,
												26051
											],
											[
												26277,
												26285
											],
											[
												26529,
												26537
											],
											[
												26769,
												26777
											],
											[
												27135,
												27143
											],
											[
												27518,
												27526
											],
											[
												27847,
												27855
											],
											[
												28198,
												28206
											],
											[
												28445,
												28453
											]
										],
										"scope": ""
									}
								},
								"selection":
								[
									[
										5253,
										5253
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.clone": -1,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
											"1":
											[
												4995,
												4996
											]
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"default_dir": "/home/mmphego/mnt/cmc3/home/mmphego/src/mkat_fpga_tests/mkat_fpga_tests",
									"detect_indentation": false,
									"function_name_status_row": 101,
									"git_gutter_is_enabled": false,
									"line_numbers": false,
									"output_tag": 1,
									"result_base_dir": "",
									"result_file_regex": "^([^ \t].*):$",
									"result_line_regex": "^ +([0-9]+):",
									"scroll_past_end": true,
									"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 855.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 27.0
			},
			"input":
			{
				"height": 123.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.1484047395.6373365":
			{
				"height": 38.0
			},
			"output.build|/home/mmphego/Apts/arduino-1.6.12/test|1500630185.3137703":
			{
				"height": 118.0
			},
			"output.build|/home/mmphego/Apts/arduino-1.6.12/test|1500630228.8832595":
			{
				"height": 118.0
			},
			"output.clangautocomplete":
			{
				"height": 171.0
			},
			"output.exec":
			{
				"height": 37.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"output.mdpopups":
			{
				"height": 0.0
			},
			"output.unsaved_changes":
			{
				"height": 132.0
			},
			"output.upload|/home/mmphego/Arduino/hcsr04|1488449906.015194":
			{
				"height": 94.0
			},
			"output.upload|/home/mmphego/OneDrive/Documents/Proposal 2016/HomeAutoPi/MQTT Pub/mqtt_esp8266_nodemcuV2|1484047356.5805616":
			{
				"height": 178.0
			},
			"pinned_build_system": "",
			"position": "0,0,0,0,0,-395,841,805,2697,3120,1920",
			"project": "",
			"replace":
			{
				"height": 94.0
			},
			"save_all_on_build": false,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"test",
						"mkat_fpga_tests/test_cbf.py"
					],
					[
						"repor",
						"report_generator/report.py"
					],
					[
						"943",
						"CBF_tests_reports/bc8n856M32k-20170911-14h22/html/_static/jquery-3.1.0.js"
					],
					[
						"baseline",
						"mkat_fpga_tests/ipython_notebooks/experimental/baseline_product_test.ipynb"
					],
					[
						"",
						"PFB_ch_test.py~"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 500.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 380.0
			},
			"select_symbol":
			{
				"height": 392.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 1308.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": false,
			"show_open_files": true,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 240.0,
			"status_bar_visible": true,
			"template_settings":
			{
				"max_columns": 2
			},
			"window_id": 168,
			"workspace_name": "/home/mmphego/projects.sublime-workspace"
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
			"/home/mmphego/projects.sublime-workspace",
			"/home/mmphego/Documents/untitled.sublime-workspace"
		]
	}
}
